#!/usr/bin/env sh
# SPDX-License-Identifier:  MIT
# Copyright 2023 Jorengarenar

diff3_get_ed_patch () (
    diffprg="$1"
    shift 1
    if [ -s "$2" ] && ! diff -s "$2" "$3" > /dev/null; then
        diff3 -x --diff-program="$diffprg" "$1" "$2" "$3" 2> /dev/null
    else
        "$diffprg" --ed "$1" "$3"
    fi
)

gen_diffprg () (
    diffprg="$(mktemp)"
    echo '
    #!/usr/bin/env sh

    diff -d "$@"
    ' > "$diffprg"
    chmod +x "$diffprg"
    echo "$diffprg"
)

git_get_conf () (
    var="$1"

    if [ -e ".gitconfig" ]; then
        fmtprg="$(git config --file=.gitconfig --get "$var")"
        if [ -n "$fmtprg" ]; then
            echo "$fmtprg"
            return
        fi
    fi

    git config --get "$var"
)

git_get_diffs () (
    color="$1"
    cur="$2"
    new="$3"
    filename="$4"

    # shellcheck disable=SC2086
    git diff $color "$cur" "$new" | \
        sed \
            -e "s/$(sed_esc -p "a$cur")/$(sed_esc -s "a/$filename")/g" \
            -e "s/$(sed_esc -p "b$new")/$(sed_esc -s "b/$cur_name")/g"
)

git_get_filenames () (
    # shellcheck disable=SC2086
    git diff --diff-filter=ARMC --name-status $1 $2 | cut -f2-
)

git_get_formatter () (
    ft="$(vim_get_filetype "$1")"
    [ -z "$ft" ] && return
    git_get_conf stylecheck."$ft"
)

git_get_pager () (
    if [ -t 1 ]; then
        echo "cat"
        return
    fi

    pgr="$(git_get_conf pager.stylecheck)"
    if [ -z "$pgr" ]; then
        pgr="$(git_get_conf pager.diff)"
        if [ -z "$pgr" ]; then
            pgr="$(git env GIT_PAGER)"
            if [ -z "$pgr" ]; then
                pgr="less"
            fi
        fi
    fi

    echo "$pgr"
)

git_retrieve_file () (
    obj="$1"
    file="$2"
    out="$3"

    if [ -n "$obj" ]; then
        git show "$obj":"$file" 2> /dev/null > "$out"
    elif [ -e "$file" ]; then
        cat "$file" > "$out"
    fi
    ret="$?"
    [ "$ret" != 0 ] && printf "" > "$out"
    return "$ret"
)

vim_apply_patch () (
    in="$1"
    out="$2"
    patch="$3"
    vim -u NONE -es \
        -S "$patch" \
        +"w! $out" \
        +"quit!" \
        "$in"
)

vim_get_filetype () (
    vim --clean -es \
        +'exec "!echo ".&ft' \
        +"quit!" \
        "$1"
)

process_file () (
    obj1="$1"
    obj2="$2"
    line="$3"
    diffprg="$4"
    diff_file="$5"

    old_name="$(echo "$line" | cut -f1)"
    cur_name="$(echo "$line" | cut -f2)"
    [ -z "$cur_name" ] && cur_name="$old_name"

    formatter="$(git_get_formatter "$cur_name")"

    if [ -z "$formatter" ]; then
        return
    fi

    if [ ! -x "$(command -v "${formatter%% *}")" ]; then
        warn "format program '${formatter%% *}\` not found"
        return
    fi

    tempdir="$(mktemp -d)"

    old="$tempdir"/old
    cur="$tempdir"/cur
    new="$tempdir"/new
    patch="$tempdir"/patch

    git_retrieve_file "$obj2" "$cur_name" "$cur"
    git_retrieve_file "$obj1" "$old_name" "$old"

    eval "$formatter" "$cur" > "$new" 2> /dev/null

    if diff -s "$cur" "$new" > /dev/null; then
        return
    fi

    diff3_get_ed_patch "$diffprg" "$cur" "$old" "$new" > "$patch"

    if [ -s "$patch" ]; then
        vim_apply_patch "$cur" "$new" "$patch"
        [ -t 1 ] && git_color_opt="--color" || git_color_opt=
        git_get_diffs "$git_color_opt" "$cur" "$new" "$cur_name" >> "$diff_file"
    fi

    rm "$old" "$cur" "$new" "$patch"
    rmdir "$tempdir"
)

sed_esc () (
    if [ "$1" = "-p" ]; then
        printf '%s\n' "$2" | sed -e 's/[]\/$*.^[]/\\&/g'
    elif [ "$1" = "-s" ]; then
        printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g'
    fi
)

warn () (
    >&2 printf "%s: " "$(basename "$0")"
    printf "\033[30m\033[103m"
    >&2 echo "$@"
    printf "\033[0m"
)


main () (
    obj1="${1:-HEAD}"
    obj2="$2"

    diffprg="$(gen_diffprg)"
    diff_file="$(mktemp)"

    git_get_filenames "$obj1" "$obj2" | while read -r line; do
        process_file "$obj1" "$obj2" "$line" "$diffprg" "$diff_file"
    done

    eval "cat '$diff_file' | $(git_get_pager)"

    rm "$diffprg" "$diff_file"
)

main "$@"
