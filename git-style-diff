#!/usr/bin/env sh

# SPDX-License-Identifier:  MIT
# Copyright 2023 Jorengarenar

gc_prog_name="style-diff"

g_obj1=
g_obj2=

g_config=
g_local_rc=

gf_debug=
gf_no_term=
gf_use_color=

# helpers {{{1

debug () (
    [ "$gf_debug" != 1 ] && return
    >&2 printf "[debug] %s @ %s:%d # " "$(basename "$0")" "$1" "$2"
    shift 2
    >&2 echo "$@"
)
alias debug='debug "$FUNCNAME" "$LINENO"'

pat_list_to_case () (
    sed 's/\s\+/|/g'
)

sed_esc () (
    if [ "$1" = "-p" ]; then
        printf '%s\n' "$2" | sed -e 's/[]\/$*.^[]/\\&/g'
    elif [ "$1" = "-s" ]; then
        printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g'
    fi
)

strip_trailing_nl () (
    printf "%s\n" "$(cat "$1")"
)

warn () (
    >&2 printf "%s: " "$(basename "$0")"
    # printf "\033[30m\033[103m"
    >&2 echo "$@"
    # printf "\033[0m"
)

# git config --get {{{1

# shellcheck disable=SC2142,SC2154
alias _git_conf_get__prep_conf_file_arg_='conf="$1"; [ -n "$conf" ] && conf="--file \"$conf\""; shift'

git_conf_get__call_ () (
    getter="$1"
    shift

    val=

    if [ -n "$g_local_rc" ]; then
        val="$($getter "$g_local_rc" "$@")"
    fi

    if [ -z "$val" ]; then
        val="$($getter "$g_config" "$@")"
    fi

    echo "$val"
)

_git_conf_get__cb__ft_map () (
    _git_conf_get__prep_conf_file_arg_

    file="$1"

    debug "args =" "$@"

    # shellcheck disable=SC2086
    git config $conf --get-regexp "$gc_prog_name"'\.map--' | while read -r line; do
        line="$(echo "$line" | awk -F'--' '{print $2}')"
        ft="$(echo "$line" | cut -d' ' -f1)"
        ext="$(echo "$line" | cut -d' ' -f2- | pat_list_to_case)"

        echo "$ft" > ~/test

        # shellcheck disable=SC2254
        case "$file" in
            $ext)
                echo "$ft"
                return
                ;;
        esac
    done
)

_git_conf_get__cb__section_glob () (
    _git_conf_get__prep_conf_file_arg_

    file="$1"
    var="$2"

    val=

    # shellcheck disable=SC2086
    while read -r line; do
        opt="$(echo "$line" | cut -d' ' -f1)"
        # shellcheck disable=SC2254
        case "$gc_prog_name.glob:$file.$var" in
            $opt) val="$(echo "$line" | cut -d' ' -f2-)" ;;
        esac
    done << EOF
$(git config $conf --get-regexp "$gc_prog_name"'\.glob:')
EOF

    echo "$val"
)

_git_conf_get__cb__simple () (
    _git_conf_get__prep_conf_file_arg_
    debug "args =" "$@"
    # shellcheck disable=SC2086
    git config $conf --get "$@"
)


git_conf_get__ft_formatter () (
    file="$1"
    ft="$2"

    debug "args =" "$@"

    fmt="$(git_conf_get__call_ _git_conf_get__cb__section_glob "$file" "formatter--$ft")"

    if [ -z "$fmt" ]; then
        fmt="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name.ft:$ft.formatter")"
    fi

    if [ -z "$fmt" ]; then
        fmt="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name.formatter--$ft")"
    fi

    echo "$fmt"
)

git_conf_get__pager () (
    if [ "$gf_no_term" = 1 ]; then
        echo "cat"
        return
    fi

    pgr=
    [ -z "$pgr" ] && pgr="$(git_conf_get pager.$gc_prog_name)"
    [ -z "$pgr" ] && pgr="$(git_conf_get pager.diff)"
    [ -z "$pgr" ] && pgr="$(git_conf_get core.pager)"
    [ -z "$pgr" ] && pgr="$GIT_PAGER"
    [ -z "$pgr" ] && pgr="$PAGER"
    [ -z "$pgr" ] && pgr="less"

    echo "$pgr"
)


git_conf_get () (
    if [ "$1" = "pager" ]; then
        git_conf_get__pager
        return
    elif [ -z "$2" ]; then
        git_conf_get__call_ _git_conf_get__cb__simple "$1"
        return
    fi

    file="$1"
    var="$2"

    val=$(git_conf_get__call_ _git_conf_get__cb__section_glob "$file" "$var")

    if [ -z "$val" ] && [ "$var" = "filetype" ]; then
        val="$(git_conf_get__call_ _git_conf_get__cb__ft_map "$file")"
        [ -z "$val" ] && return 1
    fi

    if [ -z "$val" ]; then
        ft="$(detect_filetype "$file")"
        if [ -n "$ft" ]; then
            debug "var = $var"
            case "$var" in
                formatter)
                    val="$(git_conf_get__ft_formatter "$file" "$ft")"
                    ;;
                *)
                    val="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name.ft:$ft.$var")"
                    ;;
            esac
        fi
    fi

    if [ -z "$val" ] && [ "$var" = "formatter" ]; then
        val="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name"."$var")"
    fi

    if [ -z "$val" ] && [ "$var" = "ignore" ]; then
        list="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name"."$var")"
        if [ -n "$list" ]; then
            list="$(echo "$list" | pat_list_to_case)"
            # shellcheck disable=SC2254
            case "$file" in
                $list) val=1 ;;
            esac
        fi
    fi

    echo "$val"
)

# generating style diffs {{{1

detect_filetype () (
    file="$1"

    ft="$(git_conf_get "$1" filetype)"

    if [ -z "$ft" ] && [ -x "$(command -v vim)" ]; then
        vim --clean -es \
            +'let c_syntax_for_h = 1' \
            +'exec "!echo ".&ft' \
            +"quit!" \
            "$1"
    fi

    echo "$ft"
)


diff3_get_ed_patch () (
    diffprg="$1"
    cur="$2"
    old="$3"
    new="$4"

    strip_trailing_nl "$old" > "$old".trim
    strip_trailing_nl "$new" > "$new".trim

    if [ -s "$old" ] && ! diff -s "$old".trim "$new".trim > /dev/null; then
        diff3 -x --diff-program="$diffprg" "$cur" "$old" "$new" 2> /dev/null
    else
        "$diffprg" -e "$cur" "$new"
    fi

    rm "$old".trim "$new".trim
)

ed_apply_patch () (
    in="$1"
    out="$2"
    patch="$3"

    ed= ; w=
    [ -z "$ed" ] && [ -x "$(command -v ed)" ] && ed="ed" && w="w"
    [ -z "$ed" ] && [ -x "$(command -v ex)" ] && ed="ex -R" && w="w!"

    if [ -n "$ed" ]; then
        printf '%s %s\nq' "$w" "$out" >> "$patch"
        $ed -s "$in" < "$patch"
    elif [ -x "$(command -v vim)" ]; then
        vim -R -u NONE -es \
            -S "$patch" \
            +"w! $out" \
            +"quit!" \
            "$in"
    else
        warn "missing 'ed' utility"
        exit 1
    fi
)


git_diff () (
    cur="$1"
    new="$2"
    filename="$3"

    [ "$gf_use_color" = 1 ] && color="--color" || color=

    # shellcheck disable=SC2086
    git diff $color "$cur" "$new" | \
        sed \
            -e "s/$(sed_esc -p "a$cur")/$(sed_esc -s "a/$filename")/g" \
            -e "s/$(sed_esc -p "b$new")/$(sed_esc -s "b/$filename")/g"
)

git_list_changed_files () (
    if git rev-parse --is-inside-work-tree 2> /dev/null 1>&2; then
        # shellcheck disable=SC2086
        git diff --diff-filter=ARMC --name-status $1 $2 | cut -f2-
    elif [ -s "$1" ]; then
        echo "$1"
    fi
)

git_retrieve_file_from_obj () (
    obj="$1"
    file="$2"
    out="$3"

    if [ -n "$obj" ]; then
        git show "${obj:+$obj:}""$file" 2> /dev/null
    elif [ -e "$file" ]; then
        cat "$file"
    fi
)

process_file () (
    obj1="$1"
    obj2="$2"
    line="$3"
    diffprg="$4"
    outfile="$5"

    old_name="$(echo "$line" | cut -f1)"
    cur_name="$(echo "$line" | cut -f2)"
    [ -z "$cur_name" ] && cur_name="$old_name"

    debug "cur_name = $cur_name"

    case "$(git_conf_get "$cur_name" ignore)" in
        true|1) return ;;
    esac

    formatter="$(git_conf_get "$cur_name" formatter)"
    debug "formatter = $formatter"

    if [ -z "$formatter" ]; then
        return
    fi

    if [ ! -x "$(command -v "${formatter%% *}")" ]; then
        warn "format program '${formatter%% *}' not found"
        return
    fi

    tempdir="$(mktemp -d)"

    bn="$(basename "$cur_name")"
    old="$tempdir"/old."$bn"
    cur="$tempdir"/cur."$bn"
    new="$tempdir"/new."$bn"
    patch="$tempdir"/patch

    git_retrieve_file_from_obj "$obj1" "$old_name" > "$old"
    git_retrieve_file_from_obj "$obj2" "$cur_name" > "$cur"
    if [ ! -s "$cur" ]; then
        warn "couldn't retrieve ${obj2:+$obj2:}$cur_name"
    fi

    { eval "$formatter"; } < "$cur" > "$new" 2> /dev/null

    if diff -s "$cur" "$new" > /dev/null; then
        return
    fi

    diff3_get_ed_patch "$diffprg" "$cur" "$old" "$new" > "$patch"

    if [ -s "$patch" ]; then
        ed_apply_patch "$cur" "$new" "$patch" && \
            git_diff "$cur" "$new" "$cur_name" >> "$outfile"
    fi

    rm "$old" "$cur" "$new" "$patch"
    rmdir "$tempdir"
)

# running {{{1

gen_diffprg () (
    diffprg="$(mktemp)"
    echo '
    #!/usr/bin/env sh

    diff -d "$@"
    ' > "$diffprg"
    chmod +x "$diffprg"
    echo "$diffprg"
)

usage () (
    true # TODO
)

parse_options () {
    while :; do
        case "$1" in
            -h)
                usage
                exit
                ;;
            --help)
                man "$0"
                exit
                ;;
            --debug)
                gf_debug=1
                ;;
            -c|--config)
                g_config="$2"
                if [ -z "$g_config" ]; then
                    warn "option 'config' requires a path to config file as argument"
                    exit 1
                fi
                shift
                ;;
            --color)
                gf_use_color=1
                ;;
            --no-color)
                gf_use_color=0
                ;;
            --)
                g_obj1="$2"
                g_obj2="$3"
                break
                ;;
            -?*)
                warn "unknown option: $1"
                usage
                exit 1
                ;;
            *)
                if [ -z "$1" ]; then
                    break
                elif [ -z "$g_obj1" ]; then
                    g_obj1="$1"
                elif [ -z "$g_obj2" ]; then
                    g_obj2="$1"
                else
                    warn "ignored object: $1"
                fi
        esac

        shift
    done

    [ -t 1 ] && gf_no_term=0 || gf_no_term=1

    repo_root="$(git rev-parse --show-toplevel 2> /dev/null)"
    if [ -z "$g_config" ] && [ -n "$repo_root" ]; then
        if [ -e "$repo_root"/.gitstylediff ]; then
            g_local_rc="$repo_root/.gitstylediff"
        fi
    fi

    if [ -z "$gf_use_color" ] && [ "$gf_no_term" = 0 ]; then
        gf_use_color=1
    fi
}

main () (
    obj1="${1:-HEAD}"
    obj2="$2"

    diffprg="$(gen_diffprg)"
    outfile="$(mktemp)"

    git_list_changed_files "$obj1" "$obj2" | while read -r line; do
        debug "$line"
        process_file "$obj1" "$obj2" "$line" "$diffprg" "$outfile"
    done

    { eval "$(git_conf_get pager)"; } < "$outfile"

    rm "$diffprg" "$outfile"
)

# }}}1

parse_options "$@"
main "$g_obj1" "$g_obj2"
