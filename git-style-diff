#!/usr/bin/env sh

# SPDX-License-Identifier:  MIT
# Copyright 2023 Jorengarenar

gc_prog_name="style-diff"

g_obj1=
g_obj2=

gf_no_term=
gf_use_color=

# helpers {{{1

gen_diffprg () (
    diffprg="$(mktemp)"
    echo '
    #!/usr/bin/env sh

    diff -d "$@"
    ' > "$diffprg"
    chmod +x "$diffprg"
    echo "$diffprg"
)

sed_esc () (
    if [ "$1" = "-p" ]; then
        printf '%s\n' "$2" | sed -e 's/[]\/$*.^[]/\\&/g'
    elif [ "$1" = "-s" ]; then
        printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g'
    fi
)

strip_trailing_nl () (
    printf "%s\n" "$(cat "$1")"
)

warn () (
    >&2 printf "%s: " "$(basename "$0")"
    # printf "\033[30m\033[103m"
    >&2 echo "$@"
    # printf "\033[0m"
)

# git config --get {{{1

git_conf_get__call () {
    getter="$1"
    shift

    val=

    repo_root="$(git rev-parse --show-toplevel)"
    if [ -n "$repo_root" ] && [ -e "$repo_root"/.gitstylecheck ]; then
        val="$($getter "$@" "$repo_root"/.gitstylecheck)"
    fi

    if [ -z "$val" ]; then
        val="$($getter "$@")"
    fi

    echo "$val"
}

git_conf_get__cb__ft_map () (
    file="$1"
    conf="$2"

    git config $conf --list | grep "$gc_prog_name"'\.map--' | while read -r line; do
        line="$(echo "$line" | awk -F'--' '{print $2}')"
        ft="$(echo "$line" | cut -d= -f1)"
        ext="$(echo "$line" | cut -d= -f2 | sed 's/\s\+/|/g')"

        eval "case '$file' in $ext) echo '$ft'; return ;; esac"
    done
)

git_conf_get__cb__section_glob () (
    file="$1"
    var="$2"
    conf="$3"

    val=

    while read -r line; do
        opt="$(echo "$line" | cut -d= -f1)"
        # shellcheck disable=SC2254
        case "$gc_prog_name.glob:$file.$var" in
            $opt) val="$(echo "$line" | cut -d= -f2)" ;;
        esac
    done << EOF
$(git config $conf --list | grep "$gc_prog_name"'\.glob:.*\*')
EOF

    echo "$val"
)

git_conf_get__cb__simple () (
    git config $2 --get "$1"
)


git_conf_get__general () (
    file="$1"
    var="$2"

    val=$(git_conf_get__call git_conf_get__cb__section_glob "$file" "$var")

    if [ -z "$val" ] && [ "$var" != "filetype" ]; then
        ft="$(detect_filetype "$file")"
        if [ -n "$ft" ]; then
            val="$(git_conf_get__call git_conf_get__cb__simple "$gc_prog_name.ft:$ft.$var")"
            if [ -z "$val" ] && [ "$var" = "formatter" ]; then
                val="$(git_conf_get__call git_conf_get__cb__simple "$gc_prog_name.formatter--$ft")"
            fi
        fi
    fi

    echo "$val"
)

git_conf_get__pager () (
    if [ "$gf_no_term" = 1 ]; then
        echo "cat"
        return
    fi

    pgr="$(git_conf_get__call git_conf_get__cb__simple pager.$gc_prog_name)"
    if [ -z "$pgr" ]; then
        pgr="$(git_conf_get__call git_conf_get__cb__simple pager.diff)"
        if [ -z "$pgr" ]; then
            pgr="$(git env GIT_PAGER)"
            if [ -z "$pgr" ]; then
                pgr="${PAGER:-less}"
            fi
        fi
    fi

    echo "$pgr"
)

# generating style diffs {{{1

detect_filetype () (
    file="$1"

    ft=$(git_conf_get__general "$1" filetype)

    if [ -z "$ft" ]; then
        ft="$(git_conf_get__call git_conf_get__cb__ft_map "$file")"
    fi

    if [ -z "$ft" ] && [ -x "$(command -v vim)" ]; then
        vim --clean -es \
            +'let c_syntax_for_h = 1' \
            +'exec "!echo ".&ft' \
            +"quit!" \
            "$1"
    fi

    echo "$ft"
)


diff3_get_ed_patch () (
    diffprg="$1"
    cur="$2"
    old="$3"
    new="$4"

    strip_trailing_nl "$old" > "$old".trim
    strip_trailing_nl "$new" > "$new".trim

    if [ -s "$old" ] && ! diff -s "$old".trim "$new".trim > /dev/null; then
        diff3 -x --diff-program="$diffprg" "$cur" "$old" "$new" 2> /dev/null
    else
        "$diffprg" -e "$cur" "$new"
    fi

    rm "$old".trim "$new".trim
)

ed_apply_patch () (
    in="$1"
    out="$2"
    patch="$3"

    ed= ; w=
    [ -z "$ed" ] && [ -x "$(command -v ed)" ] && ed="ed" && w="w"
    [ -z "$ed" ] && [ -x "$(command -v ex)" ] && ed="ex -R" && w="w!"

    if [ -n "$ed" ]; then
        printf '%s %s\nq' "$w" "$out" >> "$patch"
        $ed -s "$in" < "$patch"
    elif [ -x "$(command -v vim)" ]; then
        vim -R -u NONE -es \
            -S "$patch" \
            +"w! $out" \
            +"quit!" \
            "$in"
    else
        warn "missing 'ed\` utility"
        exit 1
    fi
)


git_diff () (
    cur="$1"
    new="$2"
    filename="$3"

    [ "$gf_use_color" = 1 ] && color="--color" || color=

    # shellcheck disable=SC2086
    git diff $color "$cur" "$new" | \
        sed \
            -e "s/$(sed_esc -p "a$cur")/$(sed_esc -s "a/$filename")/g" \
            -e "s/$(sed_esc -p "b$new")/$(sed_esc -s "b/$filename")/g"
)

git_list_changed_files () (
    # shellcheck disable=SC2086
    git diff --diff-filter=ARMC --name-status $1 $2 | cut -f2-
)

git_retrieve_file_from_obj () (
    obj="$1"
    file="$2"
    out="$3"

    if [ -n "$obj" ]; then
        git show "${obj:+$obj:}""$file" 2> /dev/null
    elif [ -e "$file" ]; then
        cat "$file"
    fi
)

process_file () (
    obj1="$1"
    obj2="$2"
    line="$3"
    diffprg="$4"
    outfile="$5"

    old_name="$(echo "$line" | cut -f1)"
    cur_name="$(echo "$line" | cut -f2)"
    [ -z "$cur_name" ] && cur_name="$old_name"

    formatter="$(git_conf_get__general "$cur_name" formatter)"

    if [ -z "$formatter" ]; then
        return
    fi

    if [ ! -x "$(command -v "${formatter%% *}")" ]; then
        warn "format program '${formatter%% *}\` not found"
        return
    fi

    tempdir="$(mktemp -d)"

    bn="$(basename "$cur_name")"
    old="$tempdir"/old."$bn"
    cur="$tempdir"/cur."$bn"
    new="$tempdir"/new."$bn"
    patch="$tempdir"/patch

    git_retrieve_file_from_obj "$obj1" "$old_name" > "$old"
    git_retrieve_file_from_obj "$obj2" "$cur_name" > "$cur"
    if [ ! -s "$cur" ]; then
        warn "couldn't retrieve ${obj2:+$obj2:}$cur_name"
    fi

    eval "$formatter" "$cur" > "$new" 2> /dev/null

    if diff -s "$cur" "$new" > /dev/null; then
        return
    fi

    diff3_get_ed_patch "$diffprg" "$cur" "$old" "$new" > "$patch"

    if [ -s "$patch" ]; then
        ed_apply_patch "$cur" "$new" "$patch" && \
            git_diff "$cur" "$new" "$cur_name" >> "$outfile"
    fi

    rm "$old" "$cur" "$new" "$patch"
    rmdir "$tempdir"
)

# running {{{1

usage () (
    true # TODO
)

parse_options () {
    while :; do
        case $1 in
            -h)
                usage
                exit
                ;;
            --help)
                man "$0"
                exit
                ;;
            --color)
                gf_use_color=1
                ;;
            --no-color)
                gf_use_color=0
                ;;
            --)
                g_obj1="$2"
                g_obj2="$3"
                break
                ;;
            -?*)
                warn "unknown option: $1"
                usage
                exit 1
                ;;
            *)
                if [ -z "$1" ]; then
                    break
                elif [ -z "$g_obj1" ]; then
                    g_obj1="$1"
                elif [ -z "$g_obj2" ]; then
                    g_obj2="$1"
                else
                    warn "ignored object: $1"
                fi
        esac

        shift
    done

    if [ -z "$gf_use_color" ] && [ "$gf_no_term" = 0 ]; then
        gf_use_color=1
    fi
}

main () (
    obj1="${1:-HEAD}"
    obj2="$2"

    diffprg="$(gen_diffprg)"
    outfile="$(mktemp)"

    git_list_changed_files "$obj1" "$obj2" | while read -r line; do
        process_file "$obj1" "$obj2" "$line" "$diffprg" "$outfile"
    done

    if [ "$gf_no_term" = 0 ]; then
        eval "cat '$outfile' | $(git_conf_get__pager)"
    else
        cat "$outfile"
    fi

    rm "$diffprg" "$outfile"
)

# }}}1

[ -t 1 ] && gf_no_term=0 || gf_no_term=1

parse_options "$@"
main "$g_obj1" "$g_obj2"
