#!/usr/bin/env sh

# SPDX-License-Identifier:  MIT
# Copyright 2023 Jorengarenar

# globals {{{

gc_prog_name="fmt-diff"

g_obj1=
g_obj2=

g_config=
g_local_rc=

g_cached_opt=

gf_debug=0
gf_no_term=
gf_use_color=

g_rm_list="$(mktemp)"

# }}}

# helpers {{{1

abspath () (
    if [ -d "$1" ]; then
        cd "$1" && pwd
    elif [ -f "$1" ]; then
        case "$1" in
            /*)  echo "$1" ;;
            */*) echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")" ;;
            *)   echo "$PWD/$1" ;;
        esac
    else
        warn "no such file or directory"
    fi
)

cleanup () (
    sed '1!G;h;$!d' "$g_rm_list" | while read -r path; do
        if [ -d "$path" ]; then
            for f in "$path"/*; do
                [ -e "$f" ] && [ ! -s "$f" ] && rm "$f"
            done
            rmdir "$path"
        else
            rm "$path"
        fi
    done
)

debug () (
    [ "$3" != "--" ] && [ "$gf_debug" -eq 0 ] && return
    >&2 printf "[debug] %s @ %s:%d # " "$(basename "$0")" "$1" "$2"
    shift 2
    >&2 echo "$@"
)
alias debug='debug "$FUNCNAME" "$LINENO"'

pat_list_to_case () (
    sed 's/\s\+/|/g'
)

rm_list__push () (
    [ "$gf_debug" -eq 2 ] && return
    if [ -z "$g_rm_list" ]; then
        g_rm_list="$(mktemp)"
        rm_list__push "$g_rm_list"
    fi
    for f in "$@"; do
        echo "$f" >> "$g_rm_list"
    done
)

sed_esc () (
    if [ "$1" = "-p" ]; then
        printf '%s\n' "$2" | sed -e 's/[]\/$*.^[]/\\&/g'
    elif [ "$1" = "-s" ]; then
        printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g'
    fi
)

warn () (
    >&2 printf "%s: " "$(basename "$0")"
    # printf "\033[30m\033[103m"
    >&2 echo "$@"
    # printf "\033[0m"
)

# git config --get {{{1

# shellcheck disable=SC2142,SC2154
alias _git_conf_get__prep_conf_file_arg_='conf="$1"; [ -n "$conf" ] && conf="--file \"$conf\""; shift'

git_conf_get__call_ () (
    getter="$1"
    shift

    val=

    if [ -n "$g_local_rc" ]; then
        val="$($getter "$g_local_rc" "$@")"
    fi

    if [ -z "$val" ]; then
        val="$($getter "$g_config" "$@")"
    fi

    echo "$val"
)

_git_conf_get__cb__ft_map () (
    _git_conf_get__prep_conf_file_arg_

    file="$1"

    debug "args =" "$@"

    # shellcheck disable=SC2086,SC2154
    git config $conf --get-regexp "$gc_prog_name"'\.map-' | while read -r line; do
        debug "line = $line"
        line="$(echo "$line" | awk -F'--' '{print $2}')"
        ft="$(echo "$line" | cut -d' ' -f1)"
        ext="$(echo "$line" | cut -d' ' -f2- | pat_list_to_case)"

        # shellcheck disable=SC2254
        case "$file" in
            $ext)
                echo "$ft"
                return
                ;;
        esac
    done
)

_git_conf_get__cb__section_glob () (
    _git_conf_get__prep_conf_file_arg_

    debug "args =" "$@"

    file="$1"
    var="$2"

    val=

    # shellcheck disable=SC2086
    while read -r line; do
        debug "line = $line"
        opt="$(echo "$line" | cut -d' ' -f1)"
        # shellcheck disable=SC2254
        case "$gc_prog_name.$file.$var" in
            $opt) val="$(echo "$line" | cut -d' ' -f2-)" ;;
        esac
    done << EOF
$(git config $conf --get-regexp "$gc_prog_name"'\.[^=].*\.'"$var"'$')
EOF

    echo "$val"
)

_git_conf_get__cb__simple () (
    _git_conf_get__prep_conf_file_arg_
    debug "args =" "$@"
    # shellcheck disable=SC2086
    git config $conf --get "$@"
)


git_conf_get__ft_formatter () (
    file="$1"
    ft="$2"

    debug "args =" "$@"

    fmt="$(git_conf_get__call_ _git_conf_get__cb__section_glob "$file" "formatter-$ft")"

    if [ -z "$fmt" ]; then
        fmt="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name.=$ft.formatter")"
    fi

    if [ -z "$fmt" ]; then
        fmt="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name.formatter-$ft")"
    fi

    echo "$fmt"
)

git_conf_get__pager () (
    if [ "$gf_no_term" = 1 ]; then
        echo "cat"
        return
    fi

    pgr=
    [ -z "$pgr" ] && pgr="$(git_conf_get pager.$gc_prog_name)"
    [ -z "$pgr" ] && pgr="$(git_conf_get pager.diff)"
    [ -z "$pgr" ] && pgr="$(git_conf_get core.pager)"
    [ -z "$pgr" ] && pgr="$GIT_PAGER"
    [ -z "$pgr" ] && pgr="$PAGER"
    [ -z "$pgr" ] && pgr="less"

    echo "$pgr"
)


git_conf_get () (
    if [ "$1" = "pager" ]; then
        git_conf_get__pager
        return
    elif [ -z "$2" ]; then
        git_conf_get__call_ _git_conf_get__cb__simple "$1"
        return
    fi

    file="$1"
    var="$2"

    val=$(git_conf_get__call_ _git_conf_get__cb__section_glob "$file" "$var")

    if [ -z "$val" ] && [ "$var" = "filetype" ]; then
        val="$(git_conf_get__call_ _git_conf_get__cb__ft_map "$file")"
        [ -z "$val" ] && return 1
    fi

    if [ -z "$val" ]; then
        ft="$(detect_filetype "$file")"
        if [ -n "$ft" ]; then
            debug "var = $var"
            case "$var" in
                formatter)
                    val="$(git_conf_get__ft_formatter "$file" "$ft")"
                    ;;
                *)
                    val="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name.=$ft.$var")"
                    ;;
            esac
        fi
    fi

    if [ -z "$val" ] && [ "$var" = "formatter" ]; then
        val="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name"."$var")"
    fi

    if [ -z "$val" ] && [ "$var" = "ignore" ]; then
        list="$(git_conf_get__call_ _git_conf_get__cb__simple "$gc_prog_name"."$var")"
        if [ -n "$list" ]; then
            list="$(echo "$list" | pat_list_to_case)"
            # shellcheck disable=SC2254
            case "$file" in
                $list) val=1 ;;
            esac
        fi
    fi

    echo "$val"
)

# processing files {{{1

detect_filetype () (
    file="$1"

    ft="$(git_conf_get "$1" filetype)"

    if [ -z "$ft" ] && [ -x "$(command -v vim)" ]; then
        vim --clean -es \
            +'let c_syntax_for_h = 1' \
            +'exec "!echo ".&ft' \
            +"quit!" \
            "$1"
    fi

    echo "$ft"
)

git_changes_formatted () (
    tempdir="$1"
    cur="$2"
    old="$3"
    cur_fmt="$4"
    old_fmt="$5"

    merge () { git merge-file -p "$@"; }
    diff_fmt="$tempdir"/diff_fmt
    temp="$tempdir"/temp

    rm_list__push "$temp"

    if git diff -s "$cur_fmt" "$old_fmt"; then
        merge --our "$cur" "$old" "$cur_fmt" > "$temp"
        merge "$cur" "$temp" "$cur_fmt" > "$diff_fmt"
        echo "$diff_fmt"
        return
    fi

    merge --their "$old" "$old_fmt" "$cur_fmt" > "$diff_fmt"
    rm_list__push "$diff_fmt"

    merge --our "$diff_fmt" "$old" "$cur" > "$temp"
    if ! git diff -s "$diff_fmt" "$temp"; then
        merge --their "$cur" "$diff_fmt" "$cur_fmt" > "$temp"
        merge --their "$cur" "$temp" "$cur_fmt" > "$diff_fmt"
    fi

    merge --our "$old" "$old_fmt" "$cur" > "$temp"
    if ! git diff -s "$diff_fmt" "$temp"; then
        echo "$diff_fmt"
    fi
)

git_diff () (
    cur="$1"
    new="$2"
    filename="$3"

    [ "$gf_use_color" = 1 ] && color="--color" || color=

    # shellcheck disable=SC2086
    git diff $color "$cur" "$new" | \
        sed \
            -e "s/$(sed_esc -p "a$cur")/$(sed_esc -s "a/$filename")/g" \
            -e "s/$(sed_esc -p "b$new")/$(sed_esc -s "b/$filename")/g"
)

git_retrieve_file_from_obj () (
    obj="$1"
    file="$2"

    debug "obj = '$obj'"
    debug "file = '$file'"

    if [ -e "$file" ] && [ "$obj" = "$file" ]; then
        cat "$file"
    elif [ -n "$obj" ]; then
        git show "$obj:$file" 2> /dev/null
    elif [ -e "$file" ]; then
        cat "$file"
    fi
)

process_file () (
    obj1="$1"
    obj2="$2"
    line="$3"

    old_name="$(echo "$line" | cut -f1)"
    cur_name="$(echo "$line" | cut -f2)"
    [ -z "$cur_name" ] && cur_name="$old_name"

    debug "--- PROCESSING: $cur_name ---"

    case "$(git_conf_get "$cur_name" ignore)" in
        true|1) return ;;
    esac

    formatter="$(git_conf_get "$cur_name" formatter)"
    debug "formatter = $formatter"

    if [ -z "$formatter" ]; then
        return
    fi

    if [ ! -x "$(command -v "${formatter%% *}")" ]; then
        warn "format program '${formatter%% *}' not found"
        return
    fi

    tempdir="$(mktemp -d)"
    rm_list__push "$tempdir"

    debug "$cur_name => $tempdir"

    cur="$tempdir"/cur
    old="$tempdir"/old
    cur_fmt="$tempdir"/cur_fmt
    old_fmt="$tempdir"/old_fmt

    git_retrieve_file_from_obj "$obj1" "$old_name" > "$old"
    git_retrieve_file_from_obj "$obj2" "$cur_name" > "$cur"
    rm_list__push "$old" "$cur"

    if [ ! -s "$cur" ]; then
        warn "couldn't retrieve ${obj2:+$obj2:}$cur_name"
    fi

    sh -c "$formatter" < "$cur" > "$cur_fmt" 2> /dev/null
    rm_list__push "$cur_fmt"

    if ! git diff -s "$cur" "$cur_fmt"; then
        sh -c "$formatter" < "$old" > "$old_fmt" 2> /dev/null
        rm_list__push "$old_fmt"

        diff_fmt="$(git_changes_formatted \
            "$tempdir" \
            "$cur" "$old" "$cur_fmt" "$old_fmt" \
        )"

        if [ -n "$diff_fmt" ]; then
            git_diff "$cur" "$diff_fmt" "$cur_name"
        fi
    fi
)

# running {{{1

list_files () (
    obj1="$1"
    obj2="$2"

    [ "$obj1" = "HEAD" ] && obj1=

    if ! git rev-parse --is-inside-work-tree 2> /dev/null 1>&2; then
        [ -s "$obj1" ] && abspath "$obj1"
        return
    fi

    if [ -e "$obj1" ] && ! git ls-files --error-unmatch "$obj1" 2> /dev/null 1>&2; then
        abspath "$obj1"
        return
    fi

    # shellcheck disable=SC2086
    git diff $g_cached_opt --diff-filter=ARMC --name-status $obj1 $obj2 | cut -f2-
)

setup_env () {
    TMPDIR="${TMPDIR:-/tmp}"/git-"$gc_prog_name"
    mkdir -p "$TMPDIR"
    rm_list__push "$TMPDIR"

    trap 'cleanup' EXIT
}

usage () (
    cat << EOU
EOU
)

parse_options () {
    while :; do
        case "$1" in
            -h)
                usage
                exit
                ;;
            --help)
                man "$0"
                exit
                ;;
            --cached|--staged)
                g_cached_opt="--cached"
                ;;
            --debug)
                gf_debug=1
                ;;
            --debug=*)
                gf_debug="${1#--debug=}"
                ;;
            -c|--config)
                g_config="$2"
                if [ -z "$g_config" ]; then
                    warn "option 'config' requires a path to config file as argument"
                    exit 1
                fi
                shift
                ;;
            --color)
                gf_use_color=1
                ;;
            --no-color)
                gf_use_color=0
                ;;
            --)
                g_obj1="$2"
                g_obj2="$3"
                break
                ;;
            -?*)
                warn "unknown option: $1"
                usage
                exit 1
                ;;
            *)
                if [ -z "$1" ]; then
                    break
                elif [ -z "$g_obj1" ]; then
                    g_obj1="$1"
                elif [ -z "$g_obj2" ]; then
                    g_obj2="$1"
                else
                    warn "ignored object: $1"
                fi
        esac

        shift
    done

    [ -t 1 ] && gf_no_term=0 || gf_no_term=1

    repo_root="$(git rev-parse --show-toplevel 2> /dev/null)"
    if [ -z "$g_config" ] && [ -n "$repo_root" ]; then
        if [ -e "$repo_root/.git-$gc_prog_name" ]; then
            g_local_rc="$repo_root/.git-$gc_prog_name"
        fi
    fi

    if [ -z "$gf_use_color" ] && [ "$gf_no_term" = 0 ]; then
        gf_use_color=1
    fi
}

main () (
    obj1="${1:-HEAD}"
    obj2="$2"

    outdir="$(mktemp -d)"
    rm_list__push "$outdir"
    debug "OUTDIR: $outdir"

    files="$(list_files "$obj1" "$obj2")"  # must be before 'cd $repo_root'

    repo_root="$(git rev-parse --show-toplevel 2> /dev/null)"
    [ -n "$repo_root" ] && { cd "$repo_root" || exit 1; }

    i=0
    i_len="$(echo "$files" | wc -l | tr -d '\n' | wc -m)"
    while read -r line; do
        debug "$line"

        [ -e "$obj1" ] && obj1="HEAD"
        outfile="$(printf '%s/%.*d' "$outdir" "$i_len" "$i")"

        process_file "$obj1" "$obj2" "$line" > "$outfile" &
        rm_list__push "$outfile"

        i=$((i+1))
    done << EOL
$files
EOL

    wait
    cat "$outdir"/* | sh -c "$(git_conf_get pager)"
)

# }}}1

setup_env
parse_options "$@"
main "$g_obj1" "$g_obj2"
